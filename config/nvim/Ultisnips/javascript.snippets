snippet containerredux "React Container Component"
import React from "react";
import PropTypes from "prop-types";
import ReactComponent from "components/common/reactComponent";
import {connect} from "react-redux";

export class $1 extends ReactComponent {
	constructor(props) {
		super(props);
		this._bind();
	}

	render() {
		return(
			${2:<div></div>}
		);
	}
}

${3:export default connect(mapStateToProps, mapDispatchToProps)($1);

function mapStateToProps(state, ownProps) {
	return {

	};
}

function mapDispatchToProps(dispatch) {
	return {

	};
}}
endsnippet

snippet import-react "React import"
import React from "react";
endsnippet

snippet import-proptypes "PropTypes import"
import PropTypes from "prop-types";
endsnippet

snippet import-reduxconnect "Redux connect & bindActionCreators"
import { connect } from "react-redux";
import { bindActionCreators } from "redux";
endsnippet

snippet presenter "React Presentation Component"
import React from "react";
import PropTypes from "prop-types";

const $1 = (${2:props}) => {
	return (
		<div>$3</div>
	);
};

export default $1;

$1.propTypes = {$4
};
endsnippet

snippet bingo "Debugging Alert"
alert("bingo!");
endsnippet

snippet $$ "jQuery Selector Braces"
$("$1")
endsnippet

snippet for "Standard For Loop"
for (i = 0, l = ${VISUAL}$1.length; i < l; i++) {
	$2
}
endsnippet

snippet fin "for in"
for (${1:el} in ${2:object}) {
	$3
}
endsnippet

snippet con "console.log"
console.log($1);
endsnippet

snippet objectMethodstr "object method string"
${1:methodName}: function(${4:param}) {
	${VISUAL}$0
},
endsnippet

snippet crea "Create HTML node"
document.createElement("$1");
endsnippet

snippet => "Arrow Function"
($1) => {
	$2
}
endsnippet

snippet add "Add Event Listener" i
.addEventListener("${1:type}", (${2:arg}) => {$3});
endsnippet

snippet spec-react "Spec Skeleton for React Component"
import React from "react";
import expect from "expect";
import {shallow, mount} from "enzyme";
import $1, {$1 as $1Component} from "./${1/(.)(.*)/\l$1$2/}";

const props = {

};

function setup(renderFn, theseProps = props) {
	return renderFn(<$1 {...theseProps} />);
}
endsnippet

snippet classtype "React class component"
import React, { Component } from "react";

export default class $1 extends Component {
	constructor(props) {
		super(props);
		this.state = {

		};
	}

	render() {
		return (

		);
	}
}
endsnippet

snippet des "Spec Describe Block"
describe("$1", () => {
	$2
});
endsnippet

snippet ddesc "Double Spec Describe Block"
describe("$1", () => {
	describe("$2", () => {
		it("$3", () => {
			$4
		});
	});
});
endsnippet

snippet wrapper "spec wrapper"
const wrapper = setup($1, ${2:testProps});
endsnippet

snippet it "Spec It Block"
it("$1", () => {
	$2
});
endsnippet

snippet eventprev "prevent Default"
event.preventDefault();
endsnippet

snippet func "function"
function($1) {
	$2
}
endsnippet

snippet deb "debugger"
debugger;
endsnippet

snippet clog "console.log"
console.log(${VISUAL});
endsnippet

snippet ifelse "if/else statement"
if ($1) {
	$2
} ${3:else {
  $4
}}
endsnippet

snippet switch "switch statement"
switch ($1) {
	case $2:
		$3
		${4:break;}

		default:
		$5
}
endsnippet

snippet case "case statement"
case $1:
	$2
	${3:break;}
}
endsnippet

snippet class "class"
class $1 ${3:extends $2} {
	constructor($4) {
		$5
	}
}
endsnippet

snippet import "import..."
import $1 from "$2${1/(.)(.*)/\l$1$2/}";
endsnippet

snippet namedImport "{import}"
import {$1} from "$2";
endsnippet

snippet import* "import * as ..."
import * as $1 from "$2${1/(.)(.*)/\l$1$2/}";
endsnippet

snippet {props} "destructure props"
{$1} = this.props;
endsnippet

snippet jsx-el "react div w/ props"
<${1:div}
	$2
/>
	$3
</${1:div}>
endsnippet

snippet ={} "react prop"
$1={ $2 }
endsnippet

snippet cName "Compass specific classname helper function"
className={cn("$1", "$2", "$3")}
endsnippet

snippet proptypes-env "PropTypes definition block with env check"
if (process.env.NODE_ENV != JSON.stringify("production")) {
	$1.propTypes = {
		$2: PropTypes.$3,
	}
}
endsnippet

snippet proptype-dec "PropTypes single declaration"
$1: PropTypes.$2,
endsnippet

snippet process.dev "Check first if the env is production or test"
if (process.env.NODE_ENV != "production" && process.env.NODE_ENV != "test") {
	$1
}
endsnippet

snippet rcdm
componentDidMount() {
	${0:${VISUAL}}
}
endsnippet

snippet iren
import { ${1:rename} as ${2:localRename} } from "${3:module}";
endsnippet

snippet proms
return new Promise((resolve, reject) => {});
endsnippet

snippet foreach
$1.forEach((${2:element}) => {$3});
endsnippet

snippet byid
document.getElementById("$1");
endsnippet

snippet qsel
document.querySelector("$1");
endsnippet

snippet qall
document.querySelectorAll("$1");
endsnippet

snippet j_mock_fn
jest.fn()
endsnippet

snippet j_after_all "after all tests are complete"
afterAll(() => {
	$1
}${2:, timeout});
endsnippet

snippet j_after_each "after each test is complete"
afterEach(() => {
	$1
}${2:, timeout})
endsnippet

snippet j_before_all
beforeAll(() => {
	$1
}${2:, timeout});
endsnippet

snippet j_before_each
beforeEach(() => {
	$1
}${2:, timeout});
endsnippet

snippet requireActual
require.requireActual(${1:moduleName});
endsnippet

snippet requireMock
require.requireActual(${1:moduleName})
endsnippet

snippet enzyme_setup
function setup(renderFn, testProps = defultProps) {
	return renderFn(<${1:Component} {...testProps} />);
}
endsnippet
